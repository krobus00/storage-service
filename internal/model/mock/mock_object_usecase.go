// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/krobus00/storage-service/internal/model (interfaces: ObjectUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/krobus00/auth-service/pb/auth"
	model "github.com/krobus00/storage-service/internal/model"
	nats "github.com/nats-io/nats.go"
)

// MockObjectUsecase is a mock of ObjectUsecase interface.
type MockObjectUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockObjectUsecaseMockRecorder
}

// MockObjectUsecaseMockRecorder is the mock recorder for MockObjectUsecase.
type MockObjectUsecaseMockRecorder struct {
	mock *MockObjectUsecase
}

// NewMockObjectUsecase creates a new mock instance.
func NewMockObjectUsecase(ctrl *gomock.Controller) *MockObjectUsecase {
	mock := &MockObjectUsecase{ctrl: ctrl}
	mock.recorder = &MockObjectUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectUsecase) EXPECT() *MockObjectUsecaseMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockObjectUsecase) CreateStream() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockObjectUsecaseMockRecorder) CreateStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockObjectUsecase)(nil).CreateStream))
}

// DeleteObject mocks base method.
func (m *MockObjectUsecase) DeleteObject(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockObjectUsecaseMockRecorder) DeleteObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockObjectUsecase)(nil).DeleteObject), arg0, arg1)
}

// GeneratePresignedURL mocks base method.
func (m *MockObjectUsecase) GeneratePresignedURL(arg0 context.Context, arg1 *model.GetPresignedURLPayload) (*model.GetPresignedURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedURL", arg0, arg1)
	ret0, _ := ret[0].(*model.GetPresignedURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePresignedURL indicates an expected call of GeneratePresignedURL.
func (mr *MockObjectUsecaseMockRecorder) GeneratePresignedURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedURL", reflect.TypeOf((*MockObjectUsecase)(nil).GeneratePresignedURL), arg0, arg1)
}

// InjectAuthClient mocks base method.
func (m *MockObjectUsecase) InjectAuthClient(arg0 auth.AuthServiceClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectAuthClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectAuthClient indicates an expected call of InjectAuthClient.
func (mr *MockObjectUsecaseMockRecorder) InjectAuthClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectAuthClient", reflect.TypeOf((*MockObjectUsecase)(nil).InjectAuthClient), arg0)
}

// InjectJetstreamClient mocks base method.
func (m *MockObjectUsecase) InjectJetstreamClient(arg0 nats.JetStreamContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectJetstreamClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectJetstreamClient indicates an expected call of InjectJetstreamClient.
func (mr *MockObjectUsecaseMockRecorder) InjectJetstreamClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectJetstreamClient", reflect.TypeOf((*MockObjectUsecase)(nil).InjectJetstreamClient), arg0)
}

// InjectObjectRepo mocks base method.
func (m *MockObjectUsecase) InjectObjectRepo(arg0 model.ObjectRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectObjectRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectObjectRepo indicates an expected call of InjectObjectRepo.
func (mr *MockObjectUsecaseMockRecorder) InjectObjectRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectObjectRepo", reflect.TypeOf((*MockObjectUsecase)(nil).InjectObjectRepo), arg0)
}

// InjectObjectTypeRepo mocks base method.
func (m *MockObjectUsecase) InjectObjectTypeRepo(arg0 model.ObjectTypeRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectObjectTypeRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectObjectTypeRepo indicates an expected call of InjectObjectTypeRepo.
func (mr *MockObjectUsecaseMockRecorder) InjectObjectTypeRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectObjectTypeRepo", reflect.TypeOf((*MockObjectUsecase)(nil).InjectObjectTypeRepo), arg0)
}

// InjectObjectWhitelistTypeRepo mocks base method.
func (m *MockObjectUsecase) InjectObjectWhitelistTypeRepo(arg0 model.ObjectWhitelistTypeRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectObjectWhitelistTypeRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectObjectWhitelistTypeRepo indicates an expected call of InjectObjectWhitelistTypeRepo.
func (mr *MockObjectUsecaseMockRecorder) InjectObjectWhitelistTypeRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectObjectWhitelistTypeRepo", reflect.TypeOf((*MockObjectUsecase)(nil).InjectObjectWhitelistTypeRepo), arg0)
}

// Upload mocks base method.
func (m *MockObjectUsecase) Upload(arg0 context.Context, arg1 *model.ObjectPayload) (*model.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1)
	ret0, _ := ret[0].(*model.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockObjectUsecaseMockRecorder) Upload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockObjectUsecase)(nil).Upload), arg0, arg1)
}
