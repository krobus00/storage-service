// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/krobus00/storage-service/internal/model (interfaces: ObjectTypeRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
	model "github.com/krobus00/storage-service/internal/model"
	gorm "gorm.io/gorm"
)

// MockObjectTypeRepository is a mock of ObjectTypeRepository interface.
type MockObjectTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockObjectTypeRepositoryMockRecorder
}

// MockObjectTypeRepositoryMockRecorder is the mock recorder for MockObjectTypeRepository.
type MockObjectTypeRepositoryMockRecorder struct {
	mock *MockObjectTypeRepository
}

// NewMockObjectTypeRepository creates a new mock instance.
func NewMockObjectTypeRepository(ctrl *gomock.Controller) *MockObjectTypeRepository {
	mock := &MockObjectTypeRepository{ctrl: ctrl}
	mock.recorder = &MockObjectTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectTypeRepository) EXPECT() *MockObjectTypeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockObjectTypeRepository) Create(arg0 context.Context, arg1 *model.ObjectType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockObjectTypeRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockObjectTypeRepository)(nil).Create), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockObjectTypeRepository) DeleteByID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockObjectTypeRepositoryMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockObjectTypeRepository)(nil).DeleteByID), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockObjectTypeRepository) FindByID(arg0 context.Context, arg1 string) (*model.ObjectType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*model.ObjectType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockObjectTypeRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockObjectTypeRepository)(nil).FindByID), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockObjectTypeRepository) FindByName(arg0 context.Context, arg1 string) (*model.ObjectType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(*model.ObjectType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockObjectTypeRepositoryMockRecorder) FindByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockObjectTypeRepository)(nil).FindByName), arg0, arg1)
}

// InjectDB mocks base method.
func (m *MockObjectTypeRepository) InjectDB(arg0 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectDB indicates an expected call of InjectDB.
func (mr *MockObjectTypeRepositoryMockRecorder) InjectDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectDB", reflect.TypeOf((*MockObjectTypeRepository)(nil).InjectDB), arg0)
}

// InjectRedisClient mocks base method.
func (m *MockObjectTypeRepository) InjectRedisClient(arg0 *redis.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectRedisClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectRedisClient indicates an expected call of InjectRedisClient.
func (mr *MockObjectTypeRepositoryMockRecorder) InjectRedisClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectRedisClient", reflect.TypeOf((*MockObjectTypeRepository)(nil).InjectRedisClient), arg0)
}
